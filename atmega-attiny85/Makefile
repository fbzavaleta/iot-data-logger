# Makefile for programming the ATtiny85
# modified the one generated by CrossPack
# modified by Francis Zavaleta on 17/04/2020

#################------user config--------####################
DEVICE     = attiny85
BINUCLEUS  =/home/benji/micronucleus/commandline/micronucleus
FILENAME_  = main.c
#################------end config--------####################

OBJECTS    = main.o
FUSES       = -U lfuse:w:0xe1:m -U hfuse:w:0xdd:m -U efuse:w:0xfe:m 

COMPILE = avr-gcc -Wall -Os -mmcu=$(DEVICE)


# symbolic targets:
compila:	main.hex

.c.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@

.c.s:	all
	$(COMPILE) -S $< -o $@

clean:
	rm -f main.hex main.elf $(OBJECTS)

# file targets:
main.elf: $(OBJECTS)
	$(COMPILE) -o main.elf $(OBJECTS)

main.hex: main.elf
	rm -f main.hex
	avr-objcopy -j .text -j .data -O ihex main.elf main.hex
	avr-size --format=avr --mcu=$(DEVICE) main.elf
# If you have an EEPROM section, you must also create a hex file for the
# EEPROM and add it to the "flash" target.

# Targets for code debugging and analysis:
disasm:	main.elf
	avr-objdump -d main.elf

cpp:
	$(COMPILE) -E $(FILENAME_)

#UpÃ§pad the firmware to flash
upload:
	$(BINUCLEUS) --run main.hex


